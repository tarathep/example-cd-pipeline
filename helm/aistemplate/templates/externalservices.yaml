{{- if .Values.externalServices }}
{{- $mock := .Values.mock.enabled }}
{{- range $externalService :=  get .Values.externalServices .Values.deploymentEnvironment }}
---
apiVersion: networking.istio.io/v1alpha3
kind: ServiceEntry
metadata:
  name: external-{{ $externalService.name }}-{{ $externalService.protocol }}
spec:
  hosts:
  - {{ $externalService.host }}
  exportTo:
  - "."
  ports:
  - number: 80
    name: http-port
    protocol: HTTP
  - number: {{ $externalService.port }}
    name: {{ $externalService.protocol }}-port-to-external-service
    protocol: {{ $externalService.protocol | upper }}
  resolution: DNS
  location: MESH_EXTERNAL
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: external-{{ $externalService.name }}-{{ $externalService.protocol }}-vs
spec:
  hosts:
  - {{ $externalService.host }}
  exportTo:
  - "."
  http:
  - match:
    - port: 80
{{- if $externalService.rewriteContextPath }}
      uri:
        prefix: {{ $externalService.sourceContextPath }}
    rewrite:
      uri: {{ $externalService.rewriteContextPath }}
{{- end}}
    route:
    - destination:
        host: {{ $externalService.host }}
        subset: external-service-origination
        port:
          number: {{ $externalService.port }}
      weight: {{ include "aistemplate.externalWeight" (and ($externalService.mockCandidate | default false) $mock) }}
{{- if $externalService.mockAvailable }}
    - destination:
        host: mock-service
        subset: mock
        port:
          number: 80   
      weight: {{ include "aistemplate.mockWeight" (and ($externalService.mockCandidate | default false) $mock) }}
{{- end}}
    retries:
      attempts: 3
      perTryTimeout: {{ $externalService.perTryTimeout | default "12s" }}
      {{- with $externalService.retryOn }}
      retryOn: "5xx,gateway-error"
      {{- end}}
{{- with $externalService.timeout }}
    timeout: {{ $externalService.timeout }}
{{- end}}
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: external-{{ $externalService.name }}-{{ $externalService.protocol }}-rule
spec:
  host: {{ $externalService.host }}
  exportTo:
  - "."
  subsets:
  - name: external-service-origination
    trafficPolicy:
      loadBalancer:
        simple: ROUND_ROBIN
      portLevelSettings:
      - port:
          number: {{ $externalService.port }}
        tls:
          {{- if eq ($externalService.protocol | upper) "HTTPS" }}
          mode: SIMPLE
          {{else}}
          mode: DISABLE
          {{- end}}
{{- end }}
{{- end }}